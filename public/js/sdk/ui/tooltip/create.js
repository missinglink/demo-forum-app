// Generated by CoffeeScript 1.3.3
(function() {

  app.implement(function(value) {
    var alignment, bindMouseMove, conf, createTooltip, currentValue, element, hideTooltip, init, mouse, onMouseMove, self, setAlignmentClass, showTooltip, unsetAlignmentClasses, updatePosX, updatePosY, updatePosition, win;
    self = {};
    mouse = {
      x: 0,
      y: 0
    };
    conf = app.config.get('ui.tooltip');
    element = $('');
    alignment = conf.defaultAlignment;
    currentValue = null;
    win = $(window);
    showTooltip = function(value) {
      if (value !== currentValue) {
        hideTooltip();
        createTooltip({
          content: value
        });
        return currentValue = value;
      }
    };
    hideTooltip = function() {
      $(conf.selectors.tooltip).remove();
      return currentValue = null;
    };
    createTooltip = function(data) {
      element = $(app.template.render('ui.tooltip', data)).appendTo('body');
      return updatePosition();
    };
    unsetAlignmentClasses = function() {
      var alignmentClass, _i, _len, _ref, _results;
      _ref = conf.classNames.alignment.length;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        alignmentClass = _ref[_i];
        _results.push(element.removeClass(alignmentClass));
      }
      return _results;
    };
    setAlignmentClass = function(dir) {
      unsetAlignmentClasses();
      dir = dir ? 1 : 0;
      return element.addClass(conf.classNames.alignment[dir]);
    };
    updatePosX = function() {
      var x;
      x = mouse.x - element.outerWidth() / 2;
      if (x < conf.offset) {
        x = conf.offset;
      } else if (x + element.outerWidth() > win.width() - conf.offset) {
        x = win.width() - conf.offset - element.outerWidth();
      }
      return element.css('left', x);
    };
    updatePosY = function(dir) {
      var y, _ref;
      y = mouse.y;
      dir = (_ref = dir) != null ? _ref : {
        1: 0
      };
      y = dir === 0 ? y -= element.outerHeight() + conf.offset : y += conf.offset;
      element.css('top', y);
      if (y < 0 || y + element.outerHeight() > win.height()) {
        false;
      }
      return true;
    };
    updatePosition = function() {
      var isAvailable;
      if (element.length !== 0) {
        updatePosX();
        isAvailable = updatePosY(alignment);
        if (isAvailable) {
          return setAlignmentClass(alignment);
        } else {
          updatePosY(!alignment);
          return setAlignmentClass(!alignment);
        }
      }
    };
    onMouseMove = function(evt) {
      mouse = {
        x: evt.pageX,
        y: evt.pageY
      };
      return updatePosition();
    };
    bindMouseMove = function() {
      return app.event.bind('mousemove', '', onMouseMove);
    };
    init = function() {
      return bindMouseMove();
    };
    init();
    self.show = showTooltip;
    self.hide = hideTooltip;
    return self;
  }, ['ui', 'tooltip'], true);

}).call(this);
