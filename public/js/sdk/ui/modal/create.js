// Generated by CoffeeScript 1.3.3
(function() {

  app.implement(function(content) {
    var bindClick, bindKeyPress, bindLoad, bindResize, closeButton, closeModal, conf, element, init, inner, isOpen, onClick, openModal, refreshModal, self, updatePosition;
    self = {};
    conf = app.config.get('ui.modal');
    isOpen = false;
    element = [];
    inner = [];
    closeButton = [];
    updatePosition = function() {
      var screenH, screenW;
      screenW = $(window).width();
      screenH = $(window).height();
      return inner.css({
        position: 'absolute',
        left: screenW / 2 - inner.outerWidth() / 2,
        top: screenH / 2 - inner.outerHeight() / 2
      });
    };
    openModal = function(content, settings) {
      settings.content = content;
      if (isOpen === false) {
        element = $(app.template.render('ui.modal', settings)).appendTo('body');
        inner = element.find(conf.selectors.inner);
        closeButton = element.find(conf.selectors.closeButton);
        updatePosition();
        bindLoad();
        bindClick();
        bindResize();
        $('body').css('overflow', 'hidden');
        isOpen = true;
        return app.event.trigger('modal.open', self);
      } else {
        throw 'ui.modal.open bubbled';
      }
    };
    closeModal = function() {
      if (isOpen) {
        element.remove();
        $('body').css('overflow', 'auto');
        isOpen = false;
        return app.event.trigger('modal.close', self);
      } else {
        throw 'ui.modal.close called with no open modal';
      }
    };
    refreshModal = function() {
      return updatePosition();
    };
    onClick = function(evt) {
      if ($(evt.target).closest(inner).length === 0 && evt.target !== inner) {
        return closeModal();
      }
    };
    bindResize = function() {
      return $(window).on('resize', refreshModal);
    };
    bindClick = function() {
      element.on('click', onClick);
      return closeButton.on('click', closeModal);
    };
    bindLoad = function() {
      return $(window).on('load', refreshModal);
    };
    bindKeyPress = function() {
      return app.event.bind('keydown', null, function(evt) {
        if (evt.keyCode === 27 && isOpen === true) {
          return closeModal();
        }
      });
    };
    init = function() {
      return bindKeyPress();
    };
    init();
    self.open = openModal;
    self.close = closeModal;
    self.refresh = refreshModal;
    return self;
  }, ['ui', 'modal'], true);

}).call(this);
